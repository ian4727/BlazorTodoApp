@typeparam TodoItemType where TodoItemType : TodoItem

<div class="text-[23px] h-16 border-t border-gray-200 border-solid group">
    @if (Item.IsEditing)
    {
        <input
            class="w-full h-[60px] outline-none focus:shadow-outline-red pl-12"
            type="text"
            @oninput="OnTodoEditingInput"
            @onkeypress="OnTodoEditingItemKeyPress"
            @onblur="OnEditInputBlur"
            value="@Item.Title"
        />
    }
    else
    {
        <li
            class="h-full flex items-center justify-between ml-2 "
            @ondblclick="OnTodoItemDbClick">
            <div class="checkbox li-left flex items-center ">
                <div
                    class="rounded-full w-8 h-8 border @GetCheckboxBorderClass() flex items-center justify-center mr-4"
                    @onclick:stopPropagation="true"
                    @ondblclick:stopPropagation="true"
                    @onclick="OnToggleTodoItem">
                    @if (Item.IsDone)
                    {
                        <img src="/images/check.png" alt="Checked" class="w-4 h-4" />
                    }
                </div>
                <span class="@(Item.IsDone ? "line-through text-gray-500" : "")">
                    @Item.Title
                </span>
            </div>
            <span class="todo-delete hidden mr-5 text-gray-500 cursor-pointer text-xl font-light group-hover:block"
                @onclick="OnTodoItemRemove">
                x
            </span>
        </li>
    }
</div>

@code {
    [Parameter]
    public TodoItemType Item { get; set; }

    [Parameter]
    public EventCallback<TodoItemType> OnSave { get; set; }

    [Parameter]
    public EventCallback<TodoItemType> OnCancel { get; set; }

    [Parameter]
    public EventCallback<TodoItemType> OnEdit { get; set; }

    [Parameter]
    public EventCallback<TodoItemType> OnDelete { get; set; }

    protected void OnTodoItemDbClick()
    {
        Item = Item with { IsEditing = true };
        OnEdit.InvokeAsync(Item);
    }

    protected void OnTodoEditingInput(ChangeEventArgs e)
    {
        Item = Item with { Title = e.Value?.ToString() ?? string.Empty };
    }

    protected void OnTodoEditingItemKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSave.InvokeAsync(Item);
        }
    }

    protected void OnEditInputBlur()
    {
        Item = Item with { IsEditing = false };
        OnSave.InvokeAsync(Item);
    }

    protected string GetCheckboxBorderClass() => Item.IsDone ? "border-green-500" : "border-gray-300";

    protected void OnToggleTodoItem()
    {
        Item = Item with { IsDone = !Item.IsDone };
    }

    protected void OnTodoItemRemove()
    {
        OnDelete.InvokeAsync(Item);
    }
}
