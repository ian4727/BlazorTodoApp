@page "/"
@using blazortodoapp.Models;
@using blazortodoapp.Services;
@using System.Text.Json;
@using BlazorTodoApp.Components.Controls;

@rendermode InteractiveServer

<PageTitle>To-do List</PageTitle>

<div class="text-center">
    <header>
        <h1 class="text-[80px] font-[80] text-[#b83f45] mb-4">todos</h1>
    </header>
    <main class="bg-white shadow-md min-w-[570px]">
        <TodoInput OnSave="OnTodoInputSave" />
        <TodoList Items="TodoItems" OnChanged="OnTodoListChanged" Filter="@filter">
            <ItemTemplate Context="TemplateData">
                <Todo TemplateData="TemplateData" />
            </ItemTemplate>
        </TodoList>
    </main>
    <footer class="bg-white shadow-md min-w-[570px] ">
        <TodoFooter Items="TodoItems" OnItemRemove="OnTodoItemRemove" OnFilterChanged="OnFilterChanged" />
    </footer>   
</div>

@code {
    //Dependency injection to interact with local storage
    [Inject]
    public TodoStorageService TodoStorageService { get; set; } = default!;

    protected Dictionary<int, TodoItem> TodoItems { get; set; } = [];

    protected string filter = "All";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TodoItems = await TodoStorageService.GetTodoAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    protected async void OnTodoListChanged(TodoItemChangedEventArgs e)
    {
        await TodoStorageService.SaveTodosAsync(TodoItems);
        await InvokeAsync(StateHasChanged);
    }

    protected void OnTodoInputSave(string todo)
    {
        int newId = TodoItems.Count > 0 ? TodoItems.Keys.Max() + 1 : 1;
        TodoItem item = new(newId, todo, false, false);
        TodoItems.Add(item.Id, item);
        OnTodoListChanged(new TodoItemChangedEventArgs(item, TodoItemChangeType.Add));
    }

    protected void OnTodoItemRemove(TodoItem item)
    {
        TodoItems.Remove(item.Id);
        OnTodoListChanged(new TodoItemChangedEventArgs(item, TodoItemChangeType.Remove));
    }

    protected void OnFilterChanged(string filter)
    {
        this.filter = filter;
        StateHasChanged();
    }
}