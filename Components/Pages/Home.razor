@page "/"
@using System.Text.Json
@using BlazorTodoApp.Components.Todo

@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<header class="flex justify-center items-center h-screen">
    <h1 class="text-red-400 ">todos</h1>
    <AddNewTodo Todos="todos" TodosChanged="UpdateTodos" />
</header>

<main>
    <TodoList Todos="todos" TodosChanged="UpdateTodos" />
</main>

<footer>
    <TodoFooter Todos="todos" TodosChanged="UpdateTodos" />
</footer>


@code {
    private List<TodoItem> todos = new List<TodoItem>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string storedTodosJson = await JSRuntime.InvokeAsync<string>("getItem", "todos") ?? "";
            DeserializeTodos(storedTodosJson);
        }
    }

    private void DeserializeTodos(string storedTodosJson)
    {
        if (!string.IsNullOrEmpty(storedTodosJson))
        {
            try
            {
                todos = JsonSerializer.Deserialize<List<TodoItem>>(storedTodosJson) ?? new List<TodoItem>();
                StateHasChanged();
            }
            catch (JsonException)
            {
                Console.WriteLine("Failed to deserialize todos from JSON.");
            }
        }
    }

    private async Task UpdateTodos(List<TodoItem> updatedTodos)
    {
        todos = updatedTodos;
        StateHasChanged();
        await SaveToLocalStorage();
    }

    private async Task ClearCompletedTodos()
    {
        todos.RemoveAll(todo => todo.IsDone);
        await SaveToLocalStorage();
    }

    private async Task SaveToLocalStorage()
    {
        string todosJson = JsonSerializer.Serialize(todos);
        await JSRuntime.InvokeVoidAsync("setItem", "todos", todosJson);
    }
}
