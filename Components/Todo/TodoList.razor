@using BlazorTodoApp.Components.Todo
@using System.Text.Json

@inject IJSRuntime JSRuntime

<ul class="border-b border-t border-gray">
    @if (Todos != null)
    {
        @foreach (var todo in Todos)
        {
            <li class="flex items-center hover:delete-visible mt-5">
                <input
                    class="rounded-full border-2 border-green-500 mr-5"
                    type="checkbox"
                    @bind="todo.IsDone"
                    placeholder="What needs to be done?"
                />
                @if (todo.IsEditing)
                {
                    <input
                        class="todo-edit"
                        @bind="todo.Title"
                        @onkeydown="@(e => OnEditKeyPress(e, todo))"
                    />
                }
                else
                {
                    <p
                        class="todo-item flex-1"
                        @ondblclick="() => EditTodo(todo)">@todo.Title
                    </p>
                }
                <div
                    class="btn hidden"
                    @onclick="() => DeleteTodo(todo)">
                    <div>x</div>
                </div> 
            </li>
        }
    }
</ul>

@code {
    [Parameter]
    public List<TodoItem>? Todos { get; set; }

    [Parameter]
    public EventCallback<List<TodoItem>> TodosChanged { get; set; }

    private void EditTodo(TodoItem todo)
    {
        foreach (var item in Todos)
        {
            item.IsEditing = item == todo;
            StateHasChanged();
        }
    }

    private async Task OnEditKeyPress(KeyboardEventArgs e, TodoItem todo)
    {
        if (e.Key == "Enter")
        {
            todo.IsEditing = false;
            await SaveToLocalStorage();
            StateHasChanged();
        }
    }

    private async Task DeleteTodo(TodoItem todo)
    {
        Todos.Remove(todo);
        await SaveToLocalStorage();
    }

    // Save tasks to local storage
    private async Task SaveToLocalStorage()
    {
        var todosJson = JsonSerializer.Serialize(Todos);
        await JSRuntime.InvokeVoidAsync("setItem", "todos", todosJson);
        await TodosChanged.InvokeAsync(Todos);
    }
}
