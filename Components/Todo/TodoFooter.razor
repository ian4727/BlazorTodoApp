@using BlazorTodoApp.Components.Todo
@using System.Text.Json
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<footer>
    <div class="info">
        <div>@(Todos != null ? Todos.Count(todo => !todo.IsDone) : 0) item left!</div>
        <div class="status">
            <div class="status-category" @onclick="() => FilterTodos(Filter.All)">All</div>
            <div class="status-category" @onclick="() => FilterTodos(Filter.Active)">Active</div>
            <div class="status-category" @onclick="() => FilterTodos(Filter.Completed)">Completed</div>
        </div>
        <div class="clear" @onclick="ClearCompletedTodos">Clear completed</div>
    </div>
</footer>

@code {
    [Parameter] public List<TodoItem>? Todos { get; set; }
    [Parameter] public EventCallback<List<TodoItem>> TodosChanged { get; set; }

    private async Task FilterTodos(Filter filter)
    {
        if (Todos != null)
        {
            switch (filter)
            {
                case Filter.All:
                    break;
                case Filter.Active:
                    Todos = Todos.Where(todo => !todo.IsDone).ToList();
                    break;
                case Filter.Completed:
                    Todos = Todos.Where(todo => todo.IsDone).ToList();
                    break;
            }
            await SaveToLocalStorage();
        }
    }

    private async Task ClearCompletedTodos()
    {
        if (Todos != null)
        {
            Todos = Todos.Where(todo => !todo.IsDone).ToList();
            await SaveToLocalStorage();
        }
    }

    private async Task SaveToLocalStorage()
    {
        if (Todos != null)
        {
            var todosJson = JsonSerializer.Serialize(Todos);
            await JSRuntime.InvokeVoidAsync("setItem", "todos", todosJson);
            await TodosChanged.InvokeAsync(Todos);
        }
    }

    public enum Filter
    {
        All,
        Active,
        Completed
    }
}
